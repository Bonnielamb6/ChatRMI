/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package front;

import back.Client;
import back.InterfazRemota;
import back.InterfazRemotaCliente;
import java.rmi.Naming;
import javax.swing.JOptionPane;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.rmi.server.ExportException;

/**
 *
 * @author PC
 */
public class Chat extends javax.swing.JFrame {

    Client cliente;
    String direccion = "127.0.0.1";
    String historialServidorActual;
    String historialIndividualActual;
    Boolean servicio = true;

    /**
     * Creates new form Chat
     */
    public Chat() {
        try {
            cliente = new Client();
        } catch (RemoteException e) {
            // Manejar la excepción aquí, por ejemplo, imprimir el mensaje de error
            e.printStackTrace();
        }
        initComponents();
        levantarServicio();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtAHistorial = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAMensaje = new javax.swing.JTextArea();
        btnEnviar = new javax.swing.JButton();
        btnCambiarIP = new javax.swing.JButton();
        checkServer = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtAHistorial.setEditable(false);
        txtAHistorial.setColumns(20);
        txtAHistorial.setRows(5);
        jScrollPane1.setViewportView(txtAHistorial);

        txtAMensaje.setColumns(20);
        txtAMensaje.setRows(5);
        jScrollPane2.setViewportView(txtAMensaje);

        btnEnviar.setText("Enviar");
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        btnCambiarIP.setText("IP");
        btnCambiarIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCambiarIPActionPerformed(evt);
            }
        });

        checkServer.setText("Hablar con servidor");
        checkServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkServer))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCambiarIP)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(checkServer)
                        .addGap(24, 24, 24)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEnviar, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                        .addComponent(btnCambiarIP)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCambiarIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCambiarIPActionPerformed
        // TODO add your handling code here:
        direccion = JOptionPane.showInputDialog("Escribe la direccion IP a la que mandaras mensaje").toString();
        cliente.setDireccionIP(direccion);
        servicio = false;
        if (checkServer.isSelected()) {
            ejecucion();
        } else {
            ejecucionIndividual();
        }

    }//GEN-LAST:event_btnCambiarIPActionPerformed

    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        // TODO add your handling code here:
        if (checkServer.isSelected()) {
            try {
                InterfazRemota interfaz
                        = (InterfazRemota) Naming.lookup("//"
                                + cliente.getDireccionIP() + ":" + "1234/ChatRMI");

                interfaz.actualizar(txtAMensaje.getText());

            } catch (Exception e) {
                System.out.println("Hubo un error " + e);
            }
        } else {
            try {

                InterfazRemotaCliente interfaz
                        = (InterfazRemotaCliente) Naming.lookup("//"
                                + cliente.getDireccionIP() + ":" + "1235/ChatRMI");

                interfaz.recibirMensajes(txtAMensaje.getText());
                //cliente.setHistorialIndividual(interfaz.mensajeIndividual());
                //System.out.println(cliente.getHistorialIndividual());
            } catch (Exception e) {
                System.out.println("Hubo un error " + e);
            }
        }

    }//GEN-LAST:event_btnEnviarActionPerformed

    private void checkServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkServerActionPerformed
        // TODO add your handling code here:
        if (checkServer.isSelected()) {
            servicio = false;
        } else {
            servicio = true;
            levantarServicio();
        }
    }//GEN-LAST:event_checkServerActionPerformed

    public void levantarServicio() {
        Thread hilo = new Thread(() -> {
            Registry registry = null;
            InterfazRemotaCliente mir = null;

            try {
                // Crea el registro RMI
                registry = LocateRegistry.createRegistry(1235);

                // Crea el objeto remoto si aún no existe
                if (mir == null) {
                    mir = new Client();
                }

                // Exporta el objeto remoto solo si no ha sido exportado previamente
                try {
                    java.rmi.Naming.rebind("//" + java.net.InetAddress.getLocalHost().getHostAddress() + ":1235/ChatRMI", mir);
                } catch (ExportException e) {
                    System.out.println("El objeto remoto ya está exportado.");
                }

                while (servicio) {
                    if (!mir.mensajeIndividual().equals(txtAHistorial.getText())) {
                        txtAHistorial.setText(mir.mensajeIndividual());
                        historialIndividualActual = mir.mensajeIndividual();
                    }
                }
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                try {
                    if (mir != null) {
                        // Desvincula el objeto remoto del registro RMI
                        java.rmi.Naming.unbind("//" + java.net.InetAddress.getLocalHost().getHostAddress() + ":1235/ChatRMI");

                        // Deshace la exportación del objeto remoto
                        UnicastRemoteObject.unexportObject(mir, true);
                    }
                    if (registry != null) {
                        // Detén el registro RMI
                        UnicastRemoteObject.unexportObject(registry, true);
                    }
                } catch (Exception ex) {
                    System.out.println("Error al detener el registro RMI: " + ex);
                }
            }
        });
        hilo.start();
    }

    public void buscarCambiosServidor() {
        Thread hilo = new Thread(() -> {
            while (true) {
                if (!cliente.getHistorial().equals(historialServidorActual)) {
                    txtAHistorial.setText(cliente.getHistorial());
                    historialServidorActual = cliente.getHistorial();
                }
            }
        });
        hilo.start();
    }

    public void ejecucionIndividual() {
        Thread hilo = new Thread(() -> {
            try {

                InterfazRemotaCliente interfaz
                        = (InterfazRemotaCliente) Naming.lookup("//"
                                + cliente.getDireccionIP() + ":" + "1235/ChatRMI");
                while (true) {
                    if (!interfaz.mensajeIndividual().equals(txtAHistorial.getText())) {
                        cliente.setHistorialIndividual(interfaz.mensajeIndividual());
                        //System.out.println(cliente.getHistorialIndividual());
                        txtAHistorial.setText(cliente.getHistorialIndividual());

                    }
                }
            } catch (Exception e) {
                System.out.println("Hubo un error " + e);
            }
        });
        hilo.start();
    }

    public void ejecucion() {
        Thread hilo = new Thread(() -> {
            try {
                InterfazRemota interfaz
                        = (InterfazRemota) Naming.lookup("//"
                                + cliente.getDireccionIP() + ":" + "1234/ChatRMI");
                while (true) {
                    if (!interfaz.broadcast().equals(cliente.getHistorial())) {
                        cliente.setHistorial(interfaz.broadcast());
                        txtAHistorial.setText(cliente.getHistorial());
                    }
                }
            } catch (Exception e) {
                System.out.println("Hubo un error " + e);
            }
        });
        hilo.start();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chat.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chat.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chat.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chat.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCambiarIP;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JCheckBox checkServer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtAHistorial;
    private javax.swing.JTextArea txtAMensaje;
    // End of variables declaration//GEN-END:variables
}
